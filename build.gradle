plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group 'org.wikipedia'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def allureVersion = "2.20.1",
    selenideVersion = "6.12.1",
    junitVersion = "5.9.1",
    jacksonVersion = "2.14.0",
    lombokVersion = "1.18.26"

dependencies {
    testImplementation(
            'org.aspectj:aspectjweaver:1.9.20.1',
            "com.codeborne:selenide:$selenideVersion",
            'io.rest-assured:rest-assured:5.3.2',
            "org.aeonbits.owner:owner:1.0.12",
            "com.github.javafaker:javafaker:1.0.2",
            'org.assertj:assertj-core:3.23.1',
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            'io.github.bonigarcia:webdrivermanager:5.3.1',
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-junit5:$allureVersion",
            "io.qameta.allure:allure-commandline:$allureVersion",
            "io.qameta.allure:allure-assertj:$allureVersion",
            "io.qameta.allure:allure-java-commons:$allureVersion",
            "org.projectlombok:lombok:$lombokVersion",
            'net.datafaker:datafaker:1.7.0',
            'commons-net:commons-net:3.9.0',
            'org.selenide:selenide-selenoid:2.3.6',
            "com.codeborne:selenide-proxy:$selenideVersion",
            "io.appium:java-client:8.3.0"
    )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:1.7.29",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task web(type: Test) {
    useJUnitPlatform{
        includeTags("web")
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': Integer.parseInt(System
                        .getProperty("threads").toString()),
                'junit.jupiter.execution.parallel.config.fixed.max-pool-size': Integer.parseInt(System
                        .getProperty("threads").toString())
        ]
    }
}

task webAndApi(type: Test) {
    useJUnitPlatform{
        includeTags("web", "api")
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': Integer.parseInt(System
                        .getProperty("threads").toString()),
                'junit.jupiter.execution.parallel.config.fixed.max-pool-size': Integer.parseInt(System
                        .getProperty("threads").toString())
        ]
    }
}

task api(type: Test) {
    useJUnitPlatform{
        includeTags("api")
    }
}

task android(type: Test) {
    useJUnitPlatform{
        includeTags("android")
    }
}